#!/usr/bin/env python

#===-- llvm-avrlit - AVR LLVM Integrated Tester - Host Side ---------------===#
#
#                     The LLVM Compiler Infrastructure
#
# This file is distributed under the University of Illinois Open Source
# License. See LICENSE.TXT for details.
#
#===-----------------------------------------------------------------------===#

POLL_DELAY = 0.1
MAX_RETRIES = 100
AVRLIT_BAUD = 9600

import sys, os, textwrap, subprocess, time, serial
from optparse import OptionParser, OptionGroup

# Variables configured at build time.
llvm_paths = {
  "source": "@LLVM_SOURCE_DIR@",
  "avrlit": "@CMAKE_CURRENT_SOURCE_DIR@",
  "binaries": "@LLVM_TOOLS_BINARY_DIR@",
}

# If this executable wasn't built as an LLVM tool, put empty values for
# the LLVM paths.
for k, v in llvm_paths.items():
  if v.startswith("@"):
    llvm_paths[k] = None

# If we have been built as an LLVM tool, this is an out-of-tree build.
# Otherwise, the source directory is the folder this script is in.
avrlit_dir = llvm_paths['avrlit'] or os.path.dirname(os.path.realpath(__file__))

# Where the support library is located.
libavrlit_dir = os.path.join(avrlit_dir, 'libavrlit')

# Where the LLVM tools are located.
# If this is an empty string, the system llvm tools are used.
llvm_binary_dir = llvm_paths["binaries"] or "/Users/dylan/projects/builds/llvm/bin"

parser = OptionParser("usage: %prog [options] {ll-and-cpp-files}...")
parser.add_option("--disable-reset", action="store_true", help = "Disable reset")
parser.add_option("--llvm-root", dest="llvm_root",
                  help="use LLVM tools from a given directory", metavar="LLVM_ROOT")
parser.add_option("-v", "--verbose", action="store_true", help = "Enable verbose logging to stderr")

def searchForLLVMRoot():
  if 'PATH' in os.environ:
    for dir in os.environ['PATH'].split(os.pathsep):
      if './bin' in dir:
        return dir

class Config:
  def __init__(self, llvm_root):
    if not llvm_root:
      if 'LLVM_ROOT' in os.environ:
        llvm_root = os.environ['LLVM_ROOT']
      else:
        llvm_root = searchForLLVMRoot()

        if llvm_root:
          sys.stderr.write("inferred LLVM root: {}\n".format(llvm_root))

      # Use the system LLVM
      if not llvm_root:
        sys.stderr.write("--llvm-root argument or LLVM_ROOT env var not specified, using system LLVM\n")
        llvm_root = ""

    self.board = ''
    self.mcu = ''
    self.port = ''
    self.llc = os.path.join(llvm_root, "llc")
    self.opt = os.path.join(llvm_root, "opt")
    self.clang = os.path.join(llvm_root, "clang")
    self.clangxx = os.path.join(llvm_root, "clang++")
    self.ld = "avr-gcc"
    self.programmer = 'arduino'
    self.output_dir = "/tmp/avrlit"
    self.enableReset = True
    self.verbose = False

#=== Build Test Executable ------------------------------------------------===#

def runCommand(executable, arguments, config):
  full_command = "{} {}".format(executable, " ".join(arguments))

  if config.verbose:
    sys.stderr.write(full_command + "\n")

  output = None
  try:
    output = subprocess.check_output([executable] + arguments, stderr=subprocess.STDOUT)
  except subprocess.CalledProcessError, e:
    sys.stderr.write("error: {}\n".format(full_command))
    sys.stderr.write("returned {}\n\n".format(e.returncode))
    sys.stderr.write(e.output)
    exit(1)

  if config.verbose:
    sys.stderr.write(output)

# Build the AVRLIT support library.
def buildAvrLitLibrary(config):
  runCommand("make", ["-s", "-C", libavrlit_dir], config)

# Compile a C file to an IR file.
def compileWithClang(clangExe, inputFile, config):
  outputPath = "{}/{}.ll".format(config.output_dir, os.path.basename(inputFile))
  runCommand(clangExe, ["-c", inputFile, "-o", outputPath, "-S", "-emit-llvm"], config)
  return outputPath

# Generate an LLVM IR file.
def generateIR(inputFile, config):
  extension = os.path.splitext(inputFile)[1]

  if extension in [".ll", ".mir"]: # Files which llc handles natively.
    return inputFile
  elif extension == ".c":
    return compileWithClang(config.clang, inputFile, config)
  elif extension in [".c", ".cpp", ".cxx"]:
    return compileWithClang(config.clangxx, inputFile, config)
  else:
    sys.stderr.write("don't know how to compile files with '{}' extension".format(extension))
    exit(1)


# Takes an LLVM IR file and returns a path to a new IR file
# that has had the 'avr instrumentation' pass run.
def instrumentIR(inputIR, config):
  outputPath = "{}/{}.instrumented.ll".format(config.output_dir, os.path.basename(inputIR))
  runCommand(config.opt, [inputIR, "-o", outputPath, "-S", "-avr-instrument-functions"], config)
  return outputPath


# Compiles an LLVM IR file and returns the object file path.
# Returns the path of the resultant object file.
def compileIR(inputIR, config):
  objectPath = "{}/{}.o".format(config.output_dir, os.path.basename(inputIR))
  arguments = ["-mtriple=avr-atmel-none", "-mcpu", config.mcu,
              "-filetype=obj", inputIR, "-o", objectPath]

  runCommand(config.llc, arguments, config)
  return objectPath

# Links a set of objects together into an ELF executable.
# Returns the path of the resultant executable file.
def link(objects, config):
  executablePath = "{}/{}.elf".format(config.output_dir, "executable")
  libavrlit_path = os.path.join(libavrlit_dir, config.board, "libavrlit.a")
  arguments = objects + ["-mmcu=" + config.mcu,
                        "-o", executablePath, libavrlit_path]
  runCommand(config.ld, arguments, config)
  return executablePath

# Generates a Hex file from an executable.
# Returns the path of the resultant hex file.
def generateHex(executable, config):
  hexPath = "{}/{}.hex".format(config.output_dir, os.path.basename(executable))
  arguments = ["-j", ".text", "-j", ".data", "-O", "ihex", executable, hexPath]
  runCommand("avr-objcopy", arguments, config)
  return hexPath

# Builds a test executable.
# Returns the path of the generated hex file.
def buildTestExecutable(inputFile, config):
  irPath = generateIR(inputFile, config)
  instrumentedPath = instrumentIR(irPath, config)
  objectPath = compileIR(instrumentedPath, config)
  executablePath = link([objectPath], config)
  hexPath = generateHex(executablePath, config)

  return hexPath

def waitWhilePortExists(port):
  retries = 0
  while os.path.exists(port):
    time.sleep(POLL_DELAY)
    retries += 1
    if retries == MAX_RETRIES:
      raise Exception('Device \'{}\' did not go offline within {} seconds.'
                      . format(port, retries * POLL_DELAY))

def waitUntilPortExists(port):
  retries = 0
  while not os.path.exists(port):
    time.sleep(POLL_DELAY)
    retries += 1
    if retries == MAX_RETRIES:
      raise Exception('Device \'{}\' is not available after {} seconds.'
                      . format(port, retries * POLL_DELAY))

#=== Leonardo -------------------------------------------------------------===#

def resetLeonardo(config):
  serial.Serial(config.port, 1200).close()
  time.sleep(1)

def upload(executable, config):
  if config.enableReset:
    resetLeonardo(config)

  waitUntilPortExists(config.port)
  runCommand("avrdude", ['-p' + config.mcu, '-c' + config.programmer,
                         '-P', config.port, '-b57600',
                         '-D', '-Uflash:w:{}:i'.format(executable)], config)

  if config.enableReset:
      waitWhilePortExists(port)

#=== Run Executable -------------------------------------------------------===#

def waitForSerialReady(config):
  waitUntilPortExists(config.port)
  retries = 0
  while True:
    try:
      test = serial.Serial(config.port, AVRLIT_BAUD, timeout=1)
      break
    except (OSError, serial.serialutil.SerialException) as e:
      time.sleep(POLL_DELAY)
      retries += 1
      if retries == 5:
        raise
  return test

# Runs an executable.
# Returns an error message if there was a problem.
def runExecutable(executable, config):
  upload(executable, config)
  stream = waitForSerialReady(config)

  error = None
  timeouts = 0
  lines_read = 0

  while not error:
    line = stream.readline().strip()

    if not line:
      timeouts += 1
      if timeouts == 2:
        if lines_read == 0:
          error = "device did not respond quick enough"
        else:
          break # The test must've completed.
      continue

    if line and b'\x00' in line:
      break # A null byte indicates the end of tests.

    lines_read += 1
    print(line)

  stream.close()

  return error

#=== Main -----------------------------------------------------------------===#

(opts, files) = parser.parse_args()

if not 'AVRLIT_PORT' in os.environ:
  print('AVRLIT_PORT environment variable is not set')
  exit(1)

port = os.environ['AVRLIT_PORT']
if not os.path.exists(port):
  print('AVRLIT_PORT \'{}\' does not exist'.format(port))
  exit(1)

config = Config(llvm_root = opts.llvm_root)
config.port = port
config.board = os.environ['AVRLIT_BOARD'] if 'AVRLIT_BOARD' in os.environ else 'leonardo'
config.output_dir = "/tmp/avrlit"

# Map board to MCU
config.mcu = {
    'leonardo': 'atmega32u4',
    'uno': 'atmega328p',
}[config.board]

# Map board to programmer
config.programmer = {
    'leonardo': 'avr109',
    'uno': 'arduino',
}[config.board]

# Whether we should enable the reset functionality.
config.enableReset = {
    'leonardo': True,
    'uno': False,
}[config.board]

if opts.disable_reset:
  config.enableReset = False
  print "disabling serial reset"

if opts.verbose:
    config.verbose = True

# Ensure the output directory exists.
if not os.path.exists(config.output_dir):
    os.makedirs(config.output_dir)

# Build the AVRLIT support library
buildAvrLitLibrary(config)

for file in files:
  next
  executable = buildTestExecutable(file, config)
  error_msg = runExecutable(executable, config)

  if error_msg:
    sys.stderr.write("error: {}".format(error_msg))
    sys.exit(1)
